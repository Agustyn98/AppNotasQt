# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ui_main_window.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5.QtGui import QColor
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QKeySequence
from backend import NotesDB
from PyQt5.QtGui import QKeyEvent



class Ui_MainWindow(object):
    class MyListWidget(QtWidgets.QListWidget):
        def keyPressEvent(self, event: QKeyEvent) -> None:
            if event.key() == QtCore.Qt.Key.Key_Up or event.key() == QtCore.Qt.Key.Key_Down:
                #print("Key Pressed:", event.key())
                self.check_changes_before_leaving()
                super().keyPressEvent(event)
        
        def check_changes_before_leaving(self):
            main_window_instance = Ui_MainWindow()
            print(f'Are there unsaved changes?? {main_window_instance.unsaved_changes}')
            if main_window_instance.unsaved_changes:
                print('Are you sure you want to leave?')
                


    app_title_str = 'AppNotas'
    def setupUi(self, MainWindow):
        self.MainWindow = MainWindow
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout_2.setContentsMargins(2, 2, 2, 2)
        self.verticalLayout_2.setSpacing(2)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.comboBox = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox.setCurrentText("")
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.horizontalLayout_3.addWidget(self.comboBox)
        self.lineEdit_searchall = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_searchall.setObjectName("lineEdit_searchall")
        self.horizontalLayout_3.addWidget(self.lineEdit_searchall)
        self.lineEdit_searchnote = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_searchnote.setObjectName("lineEdit_searchnote")
        self.horizontalLayout_3.addWidget(self.lineEdit_searchnote)
        # Buttons
        self.checkbox_pin = QtWidgets.QCheckBox("üè±", self.centralwidget)
        self.checkbox_pin.setObjectName("checkbox_pin")
        self.horizontalLayout_3.addWidget(self.checkbox_pin)
        self.horizontalLayout_3.setStretch(0, 3)
        self.horizontalLayout_3.setStretch(1, 3)
        self.horizontalLayout_3.setStretch(2, 3)
        self.verticalLayout.addLayout(self.horizontalLayout_3)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.listWidget = QtWidgets.QListWidget(self.centralwidget)
        self.listWidget = self.MyListWidget(self.centralwidget)
        #self.listWidget.setObjectName("listWidget")
        self.horizontalLayout.addWidget(self.listWidget)
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.lineEdit_title = QtWidgets.QLineEdit(self.centralwidget)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.lineEdit_title.setFont(font)
        self.lineEdit_title.setObjectName("lineEdit_title")
        self.verticalLayout_3.addWidget(self.lineEdit_title)
        self.textEdit = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit.setObjectName("textEdit")
        self.verticalLayout_3.addWidget(self.textEdit)
        self.verticalLayout_3.setStretch(0, 1)
        self.verticalLayout_3.setStretch(1, 4)
        self.horizontalLayout.addLayout(self.verticalLayout_3)
        self.horizontalLayout.setStretch(0, 1)
        self.horizontalLayout.setStretch(1, 4)
        self.verticalLayout.addLayout(self.horizontalLayout)
        self.verticalLayout.setStretch(0, 5)
        self.verticalLayout.setStretch(1, 95)
        self.verticalLayout_2.addLayout(self.verticalLayout)
        MainWindow.setCentralWidget(self.centralwidget)
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", self.app_title_str))
        self.comboBox.setPlaceholderText(_translate("MainWindow", "Menu"))
        self.comboBox.setItemText(0, _translate("MainWindow", "Menu"))
        self.comboBox.setItemText(1, _translate("MainWindow", "New"))
        self.comboBox.setItemText(2, _translate("MainWindow", "Save"))
        self.comboBox.setItemText(3, _translate("MainWindow", "Delete"))
        self.comboBox.setItemText(4, _translate("MainWindow", "Info"))
        self.comboBox.setItemText(5, _translate("MainWindow", "Import"))
        self.comboBox.setItemText(6, _translate("MainWindow", "Export"))
        self.comboBox.setItemText(7, _translate("MainWindow", "Settings"))
        self.lineEdit_searchall.setPlaceholderText(
            _translate("MainWindow", "Search All")
        )
        self.lineEdit_searchnote.setPlaceholderText(
            _translate("MainWindow", "Search Note")
        )

        self.comboBox.currentTextChanged.connect(lambda x: self.combobox_changed(x))

        self.add_data_listview()

        self.listWidget.currentItemChanged.connect(
            lambda x: self.set_textedit_text(x.data(QtCore.Qt.UserRole))
            if x is not None
            else x
        )

        #self.listWidget.keyPressEvent = self.list_key_press_event

        self.shortcut = QtWidgets.QShortcut(QKeySequence("Ctrl+S"), self)
        self.shortcut.activated.connect(lambda: self.combobox_changed(txt="Save"))

        self.textEdit.textChanged.connect(lambda: self.unsaved_changes_text())

    note_db = NotesDB()

    saved_flag = False

    def add_data_listview(self, saved_flag=False):
        # Refresh listview
        if saved_flag:
            current_item_data = self.listWidget.currentItem().data(QtCore.Qt.UserRole)
            current_id = current_item_data[0]
            self.saved_flag = True

        self.listWidget.clear()
        list_of_notes = self.note_db.get_list_of_notes()
        for note in list_of_notes:
            item_to_add = QtWidgets.QListWidgetItem()
            if note[4] == 1:
                item_to_add.setBackground(QColor("yellow"))
            item_to_add.setText(note[1])
            item_to_add.setData(QtCore.Qt.UserRole, (note[0], note[4]))
            self.listWidget.addItem(item_to_add)

        if saved_flag:
            for item_index in range(self.listWidget.count()):
                item_data = self.listWidget.item(item_index).data(QtCore.Qt.UserRole)
                id = item_data[0]
                if id == current_id:
                    self.listWidget.setCurrentRow(item_index)
        
        self.unsaved_changes = False

    def refresh_pin_checkbox(self):
        current_item_data = self.listWidget.currentItem().data(QtCore.Qt.UserRole)
        pin = current_item_data[1]
        if pin == 1:
            self.checkbox_pin.setChecked(True)
            self.checkbox_pin.setText("üè≤")
        else:
            self.checkbox_pin.setChecked(False)
            self.checkbox_pin.setText("üè±")

    def set_textedit_text(self, metadata):

        if self.saved_flag:
            self.saved_flag = False
            return

        if self.unsaved_changes:
            self.unsaved_changes = False

        id = metadata[0]
        note = self.note_db.get_note_by_id(id)
        self.textEdit.setText(note[2])
        self.lineEdit_title.setText(note[1])
        self.refresh_pin_checkbox()

    def combobox_changed(self, txt):
        # print(txt)
        if txt == "New":
            self.note_db.add_note()
            self.add_data_listview()
            for item_index in range(self.listWidget.count()):
                item_data = self.listWidget.item(item_index).data(QtCore.Qt.UserRole)
                pin = item_data[1]
                if pin == 0:
                    self.listWidget.setCurrentRow(item_index)
                    self.lineEdit_title.setFocus()
                    break

        if txt == "Save":
            # self.listWidget.setCurrentRow(0)
            self.unsaved_changes = False
            self.MainWindow.setWindowTitle(self.app_title_str)
            current_item_data = self.listWidget.currentItem().data(QtCore.Qt.UserRole)
            id = current_item_data[0]
            pin = 1 if self.checkbox_pin.isChecked() else 0
            self.note_db.update_note(
                id, self.lineEdit_title.text(), self.textEdit.toPlainText(), pin
            )
            self.add_data_listview(saved_flag=True)

        if txt == "Delete":
            # self.note_db.delete_note()
            if self.listWidget.currentItem() is not None:
                data = self.listWidget.currentItem().data(QtCore.Qt.UserRole)
                id = data[0]
                self.note_db.delete_note(id)
                self.add_data_listview()

        self.comboBox.setCurrentIndex(0)

    unsaved_changes = False 
    def unsaved_changes_text(self):
        if not self.unsaved_changes:
            print('changing window')
            self.MainWindow.setWindowTitle('* ' + self.app_title_str + ' *')
        self.unsaved_changes = True
    
    def list_key_press_event(self, event: QKeyEvent):
        print("Key Pressed:", event.key())
        #self.listWidget.keyPressEvent(event)

